---
##
## This application set is used to create Applications for each of the
## platform helm charts, defined in the ./platform directory.
##
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: tenant-system-helm
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "20"
spec:
  goTemplate: true

  ## Add a strategy permiting us to control the ordering of resources
  ## by using labelling.
  strategy:
    type: RollingSync
    rollingSync:
      steps:
        - matchExpressions:
            - key: phase
              operator: In
              values:
                - primary
        - matchExpressions:
            - key: phase
              operator: In
              values:
                - secondary
        - matchExpressions:
            - key: phase
              operator: NotIn
              values:
                - primary
                - secondary

  ## Generate applications from the platform repository
  ## NOTICE: These generators are patched in the kustomize/overlays/release/platform.yaml
  ## file. So if you are making any changes here, please make sure to update the overlay file.
  generators:
    - matrix:
        generators:
          - clusters:
              selector:
                matchExpressions:
                  - key: environment
                    operator: Exists
          - git:
              repoURL: "{{ .metadata.annotations.tenant_repository }}"
              revision: "{{ .metadata.annotations.tenant_revision }}"
              files:
                - path: "{{ .metadata.annotations.tenant_path }}/workloads/system/**/{{ .metadata.labels.cluster_name }}.yaml"
            selector:
              matchExpressions:
                - key: helm.version
                  operator: Exists
                - key: helm.repository
                  operator: Exists

  ## Sync Policy for the ApplicationSet
  syncPolicy:
    # Prevents ApplicationSet controller from modifying Applications. Delete is allowed.
    applicationsSync: create-delete

  ## Template out an application for each of the tenant applications
  template:
    metadata:
      name: "tenant-helm-{{ .path.basenameNormalized }}-{{ .metadata.labels.cluster_name }}"
      namespace: argocd
      annotations:
        argocd.argoproj.io/sync-wave: '{{ default "20" .sync.wave }}'
      labels:
        app.kubernetes.io/instance: "{{ .metadata.labels.cluster_name }}"
        app.kubernetes.io/managed-by: argocd
        app.kubernetes.io/name: "{{ default .path.basenameNormalized .helm.release_name }}"
        app.kubernetes.io/part-of: tenant-helm
        app.kubernetes.io/type: helm
        phase: '{{ default "secondary" .sync.phase }}'

    spec:
      ## The project to use for the application
      project: tenant-system

      ## The sources to use for the application
      sources: []

      ## Destination is the cluster to deploy to
      destination:
        server: "{{ .server }}"
        ## /workloads/applications/NAMESPACE/FILE.yaml
        namespace: "{{ index .path.path 3 }}"

      ## Sync policy for the application
      syncPolicy:
        automated:
          selfHeal: true
          prune: true
        retry:
          backoff:
            duration: '{{ default "30s" .sync.duration }}'
            maxDuration: '{{ default "5m" .sync.max_duration }}'
          limit: 10

        ## Namespace metadata configuration, for when CreateNamespace=true
        managedNamespaceMetadata:
          labels:
            app.kubernetes.io/managed-by: argocd
            platform.local/namespace-type: tenant-system
            platform.local/namespace: tenant
            pod-security.kubernetes.io/enforce: '{{ default "baseline" .namespace.pod_security }}'

        # Use server-side apply for better efficiency and interop
        # between controllers making partial changes to manifests.
        # Also enable apply out of sync only rather than trying to
        # apply all resources in the application.
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true

  ## Template patch
  templatePatch: |
    {{- $index := 0 }}
    {{- range $i, $k := .path.segments }}
    {{- if (eq "system" $k) }}
    {{- $index = $i }}
    {{- break }}
    {{- end }}
    {{- end }}
    {{- $namespace := index .path.segments (add1 $index) }}
    {{- $context := toJson . | fromJson }}
    spec:
      destination:
        namespace: {{ $namespace }}
        server: "{{ .server }}"

      sources:
        ## The kustomize folder includes the default settings and manifests
        ## for all namespace creations for the tenant applications - i.e.
        ## service accounts, network policies, etc.
        - repoURL: "{{ .metadata.annotations.platform_repository }}"
          targetRevision: "{{ .metadata.annotations.platform_revision }}"
          path: "apps/tenant/namespace"
          kustomize:
            patches:
              - target:
                  kind: Namespace
                  labelSelector: "platform.local/namespace=tenant"
                patch: |
                  - op: replace
                    path: /metadata/name
                    value: "{{ $namespace }}"
                  - op: replace
                    path: /metadata/labels/platform.local~1namespace-type
                    value: "tenant-system"

        - repoURL: "{{ .helm.repository }}"
          targetRevision: "{{ .helm.version }}"
          chart: "{{ .helm.chart }}"
          path: "{{ .helm.path }}"
          helm:
            releaseName: "{{ default .path.basenameNormalized .helm.release_name }}"
            ignoreMissingValueFiles: true
            valueFiles:
              - "$values/{{ .path.path }}/values/{{ .metadata.labels.cluster_name }}.yaml"
              - "$values/{{ .path.path }}/values/{{ .metadata.labels.environment }}.yaml"
              - "$values/{{ .path.path }}/values/{{ .metadata.labels.tenant }}.yaml"
              - "$values/{{ .path.path }}/values/all.yaml"
            {{- if and (.helm.parameters) (gt (len .helm.parameters) 0) }}
            parameters:
            {{- range $param := .helm.parameters }}
            {{- $params := splitList "." $param.value }}
              - name: {{ $param.name }}
                {{- if eq (len $params) 1 }}
                value: "{{ dig (index $params 0) $param.value $context }}"
                {{- else if eq (len $params) 2 }}
                value: "{{ dig (index $params 0) (index $params 1) "" $context }}"
                {{- else if eq (len $params) 3 }}
                value: "{{ dig (index $params 0) (index $params 1) (index $params 2) "" $context }}"
                {{- else if eq (len $params) 4 }}
                value: "{{ dig (index $params 0) (index $params 1) (index $params 2) (index $params 3) "" $context }}"
                {{- end }}
            {{- end }}
            {{- end }}

        # Source the platform values
        - repoURL: "{{ .metadata.annotations.tenant_repository }}"
          targetRevision: "{{ .metadata.annotations.tenant_revision }}"
          ref: values
